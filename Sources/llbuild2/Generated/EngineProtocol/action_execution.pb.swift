// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: EngineProtocol/action_execution.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

import Foundation
import SwiftProtobuf

import TSFCAS

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enum representing the supported artifact types for remote action execution.
public enum LLBArtifactType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Artifact represents a regular file.
  case file // = 0

  /// Artifact represents a directory containing files and/or other directories.
  case directory // = 1

  /// Arbitrary data blob with no file system representation
  case blob // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .file
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .file
    case 1: self = .directory
    case 2: self = .blob
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .file: return 0
    case .directory: return 1
    case .blob: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension LLBArtifactType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [LLBArtifactType] = [
    .file,
    .directory,
    .blob,
  ]
}

#endif  // swift(>=4.2)

/// Represents a remote action execution input artifact.
public struct LLBActionInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The path where the file should be expected to be placed. This path can't be absolute, but instead it must be
  /// relative to the execution root.
  public var path: String = String()

  /// The dataID representing the contents of the input. The remote execution service should be able to retrieve the
  /// contents of the input from the CAS system.
  public var dataID: TSFCAS.LLBDataID {
    get {return _dataID ?? TSFCAS.LLBDataID()}
    set {_dataID = newValue}
  }
  /// Returns true if `dataID` has been explicitly set.
  public var hasDataID: Bool {return self._dataID != nil}
  /// Clears the value of `dataID`. Subsequent reads from it will return its default value.
  public mutating func clearDataID() {self._dataID = nil}

  /// The type of artifact that this input represents.
  public var type: LLBArtifactType = .file

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dataID: TSFCAS.LLBDataID? = nil
}

/// Represents a remote action execution output artifact. This is the declaration of an artifact that is expected to be
/// produced by the action execution.
public struct LLBActionOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The path where the file is expected to be produced. This path must be relative to the execution root.
  public var path: String = String()

  /// The type of artifact expected to be produced by the action.
  public var type: LLBArtifactType = .file

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// An environment variable entry.
public struct LLBEnvironmentVariable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the environment variable.
  public var name: String = String()

  /// The value of the environment variable.
  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The action specification. This value is part of the action execution key, so in order to ensure cache hits, the
/// contents of repeated fields must have stable ordering, especially for the preActions and environment fields. This
/// spec doesn't enforce any ordering, but it is expected that the environment variables are ordered lexicographically
/// by their name.
public struct LLBActionSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The command line arguments to execute on the remote machine.
  public var arguments: [String] = []

  /// The environment variables to set while executing the arguments.
  public var environment: [LLBEnvironmentVariable] = []

  /// Optional working directory that should be relative to the execution root. This might be needed for specific
  /// tools that do not support relative input paths. For such tools, the workingDirectory may have the
  /// `<LLB_EXECUTION_ROOT>/` prefix, which will get replaced by the actual remote execution root. This feature may
  /// not be supported in all remote execution environments.
  public var workingDirectory: String = String()

  /// A list of actions that should be executed before executing the main action. These are simpler action specs that
  /// allow running setup commands that may be required for the action to succeed. These pre-actions do not specify
  /// inputs or outputs, and it's expected that any required inputs are represented in the action execution request.
  /// These pre-actions are expected to be executed in the same host as the action, so they may make action execution
  /// slower. This feature may not be supported in all remote execution environments and should be used as a last
  /// resort.
  public var preActions: [LLBPreActionSpec] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The specification for a pre-action. For more info check the preActions field in LLBActionSpec.
public struct LLBPreActionSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The command line arguments to execute.
  public var arguments: [String] = []

  /// Additional environment variables to be added for this particular pre-action. It is expected that these
  /// environment variables are added on top of the main action's environment, overriding any environment variables if
  /// there is a collision.
  public var environment: [LLBEnvironmentVariable] = []

  /// Whether this pre-action should run in the background while the main action is being executed. It is up to the
  /// remote execution service to manage the lifetime of these processes.
  public var background: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The request for a remote action execution.
public struct LLBActionExecutionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The specificiation of the action to execute.
  public var actionSpec: LLBActionSpec {
    get {return _actionSpec ?? LLBActionSpec()}
    set {_actionSpec = newValue}
  }
  /// Returns true if `actionSpec` has been explicitly set.
  public var hasActionSpec: Bool {return self._actionSpec != nil}
  /// Clears the value of `actionSpec`. Subsequent reads from it will return its default value.
  public mutating func clearActionSpec() {self._actionSpec = nil}

  /// The list of input artifacts required for this action to execute.
  public var inputs: [LLBActionInput] = []

  /// The expected outputs from the action execution.
  public var outputs: [LLBActionOutput] = []

  /// List of outputs to return even if the action failed (i.e. exitCode != 0). This is mostly used to return artifacts
  /// that can be used for debugging why an action failed.
  public var unconditionalOutputs: [LLBActionOutput] = []

  /// Any container for moving around unspecified data.
  public var additionalData: [SwiftProtobuf.Google_Protobuf_Any] = []

  /// May contain a data ID to use as base logs to provide as part of this action.
  public var baseLogsID: TSFCAS.LLBDataID {
    get {return _baseLogsID ?? TSFCAS.LLBDataID()}
    set {_baseLogsID = newValue}
  }
  /// Returns true if `baseLogsID` has been explicitly set.
  public var hasBaseLogsID: Bool {return self._baseLogsID != nil}
  /// Clears the value of `baseLogsID`. Subsequent reads from it will return its default value.
  public mutating func clearBaseLogsID() {self._baseLogsID = nil}

  /// Optional function binary to execute for this action
  public var functionID: TSFCAS.LLBDataID {
    get {return _functionID ?? TSFCAS.LLBDataID()}
    set {_functionID = newValue}
  }
  /// Returns true if `functionID` has been explicitly set.
  public var hasFunctionID: Bool {return self._functionID != nil}
  /// Clears the value of `functionID`. Subsequent reads from it will return its default value.
  public mutating func clearFunctionID() {self._functionID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _actionSpec: LLBActionSpec? = nil
  fileprivate var _baseLogsID: TSFCAS.LLBDataID? = nil
  fileprivate var _functionID: TSFCAS.LLBDataID? = nil
}

/// The response for a remote action execution request.
public struct LLBActionExecutionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of dataIDs representing the contents of the outputs. This list is expected to contain 1 dataID per
  /// output requested, in the same order as they appear in the action execution request. This value is expected to be
  /// populated only if the action completed successfully.
  public var outputs: [TSFCAS.LLBDataID] = []

  /// List of dataIDs for the requested unconditional outputs. This list will only be populated if the action was able
  /// to run, either successfully (i.e. exitCode == 0) or not (exitCode != 0).
  public var unconditionalOutputs: [TSFCAS.LLBDataID] = []

  /// The exit code for the action execution.
  public var exitCode: Int32 = 0

  /// The dataID for the contents of the stdout and stderr of the action (expected to be intermixed).
  public var stdoutID: TSFCAS.LLBDataID {
    get {return _stdoutID ?? TSFCAS.LLBDataID()}
    set {_stdoutID = newValue}
  }
  /// Returns true if `stdoutID` has been explicitly set.
  public var hasStdoutID: Bool {return self._stdoutID != nil}
  /// Clears the value of `stdoutID`. Subsequent reads from it will return its default value.
  public mutating func clearStdoutID() {self._stdoutID = nil}

  /// Any container for moving around unspecified data.
  public var additionalData: [SwiftProtobuf.Google_Protobuf_Any] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stdoutID: TSFCAS.LLBDataID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension LLBArtifactType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FILE"),
    1: .same(proto: "DIRECTORY"),
    2: .same(proto: "BLOB"),
  ]
}

extension LLBActionInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBActionInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "dataID"),
    3: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dataID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if let v = self._dataID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.type != .file {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBActionInput, rhs: LLBActionInput) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._dataID != rhs._dataID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBActionOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBActionOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if self.type != .file {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBActionOutput, rhs: LLBActionOutput) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBEnvironmentVariable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBEnvironmentVariable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBEnvironmentVariable, rhs: LLBEnvironmentVariable) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBActionSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBActionSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "arguments"),
    2: .same(proto: "environment"),
    3: .same(proto: "workingDirectory"),
    4: .same(proto: "preActions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.arguments) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.environment) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.workingDirectory) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.preActions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.arguments.isEmpty {
      try visitor.visitRepeatedStringField(value: self.arguments, fieldNumber: 1)
    }
    if !self.environment.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.environment, fieldNumber: 2)
    }
    if !self.workingDirectory.isEmpty {
      try visitor.visitSingularStringField(value: self.workingDirectory, fieldNumber: 3)
    }
    if !self.preActions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.preActions, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBActionSpec, rhs: LLBActionSpec) -> Bool {
    if lhs.arguments != rhs.arguments {return false}
    if lhs.environment != rhs.environment {return false}
    if lhs.workingDirectory != rhs.workingDirectory {return false}
    if lhs.preActions != rhs.preActions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBPreActionSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBPreActionSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "arguments"),
    2: .same(proto: "environment"),
    3: .same(proto: "background"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.arguments) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.environment) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.background) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.arguments.isEmpty {
      try visitor.visitRepeatedStringField(value: self.arguments, fieldNumber: 1)
    }
    if !self.environment.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.environment, fieldNumber: 2)
    }
    if self.background != false {
      try visitor.visitSingularBoolField(value: self.background, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBPreActionSpec, rhs: LLBPreActionSpec) -> Bool {
    if lhs.arguments != rhs.arguments {return false}
    if lhs.environment != rhs.environment {return false}
    if lhs.background != rhs.background {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBActionExecutionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBActionExecutionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actionSpec"),
    2: .same(proto: "inputs"),
    3: .same(proto: "outputs"),
    4: .same(proto: "unconditionalOutputs"),
    5: .same(proto: "additionalData"),
    6: .same(proto: "baseLogsID"),
    7: .same(proto: "functionID"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._actionSpec) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.unconditionalOutputs) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.additionalData) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._baseLogsID) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._functionID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._actionSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 3)
    }
    if !self.unconditionalOutputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unconditionalOutputs, fieldNumber: 4)
    }
    if !self.additionalData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalData, fieldNumber: 5)
    }
    if let v = self._baseLogsID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._functionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBActionExecutionRequest, rhs: LLBActionExecutionRequest) -> Bool {
    if lhs._actionSpec != rhs._actionSpec {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unconditionalOutputs != rhs.unconditionalOutputs {return false}
    if lhs.additionalData != rhs.additionalData {return false}
    if lhs._baseLogsID != rhs._baseLogsID {return false}
    if lhs._functionID != rhs._functionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBActionExecutionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBActionExecutionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "outputs"),
    5: .same(proto: "unconditionalOutputs"),
    2: .same(proto: "exitCode"),
    3: .same(proto: "stdoutID"),
    4: .same(proto: "additionalData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.exitCode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._stdoutID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.additionalData) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.unconditionalOutputs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 1)
    }
    if self.exitCode != 0 {
      try visitor.visitSingularInt32Field(value: self.exitCode, fieldNumber: 2)
    }
    if let v = self._stdoutID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.additionalData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalData, fieldNumber: 4)
    }
    if !self.unconditionalOutputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unconditionalOutputs, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBActionExecutionResponse, rhs: LLBActionExecutionResponse) -> Bool {
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unconditionalOutputs != rhs.unconditionalOutputs {return false}
    if lhs.exitCode != rhs.exitCode {return false}
    if lhs._stdoutID != rhs._stdoutID {return false}
    if lhs.additionalData != rhs.additionalData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
