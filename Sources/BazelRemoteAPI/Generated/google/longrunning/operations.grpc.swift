//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/longrunning/operations.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Google_Longrunning_OperationsClient, then call methods of this protocol to make API calls.
public protocol Google_Longrunning_OperationsClientProtocol {
  func listOperations(_ request: Google_Longrunning_ListOperationsRequest, callOptions: CallOptions?) -> UnaryCall<Google_Longrunning_ListOperationsRequest, Google_Longrunning_ListOperationsResponse>
  func getOperation(_ request: Google_Longrunning_GetOperationRequest, callOptions: CallOptions?) -> UnaryCall<Google_Longrunning_GetOperationRequest, Google_Longrunning_Operation>
  func deleteOperation(_ request: Google_Longrunning_DeleteOperationRequest, callOptions: CallOptions?) -> UnaryCall<Google_Longrunning_DeleteOperationRequest, SwiftProtobuf.Google_Protobuf_Empty>
  func cancelOperation(_ request: Google_Longrunning_CancelOperationRequest, callOptions: CallOptions?) -> UnaryCall<Google_Longrunning_CancelOperationRequest, SwiftProtobuf.Google_Protobuf_Empty>
  func waitOperation(_ request: Google_Longrunning_WaitOperationRequest, callOptions: CallOptions?) -> UnaryCall<Google_Longrunning_WaitOperationRequest, Google_Longrunning_Operation>
}

public final class Google_Longrunning_OperationsClient: GRPCClient, Google_Longrunning_OperationsClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.longrunning.Operations service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Lists operations that match the specified filter in the request. If the
  /// server doesn't support this method, it returns `UNIMPLEMENTED`.
  ///
  /// NOTE: the `name` binding allows API services to override the binding
  /// to use different resource name schemes, such as `users/*/operations`. To
  /// override the binding, API services can add a binding such as
  /// `"/v1/{name=users/*}/operations"` to their service configuration.
  /// For backwards compatibility, the default name includes the operations
  /// collection id, however overriding users must ensure the name binding
  /// is the parent resource, without the operations collection id.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListOperations.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listOperations(
    _ request: Google_Longrunning_ListOperationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Longrunning_ListOperationsRequest, Google_Longrunning_ListOperationsResponse> {
    return self.makeUnaryCall(
      path: "/google.longrunning.Operations/ListOperations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Gets the latest state of a long-running operation.  Clients can use this
  /// method to poll the operation result at intervals as recommended by the API
  /// service.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOperation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOperation(
    _ request: Google_Longrunning_GetOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Longrunning_GetOperationRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.longrunning.Operations/GetOperation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Deletes a long-running operation. This method indicates that the client is
  /// no longer interested in the operation result. It does not cancel the
  /// operation. If the server doesn't support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteOperation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteOperation(
    _ request: Google_Longrunning_DeleteOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Longrunning_DeleteOperationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.longrunning.Operations/DeleteOperation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Starts asynchronous cancellation on a long-running operation.  The server
  /// makes a best effort to cancel the operation, but success is not
  /// guaranteed.  If the server doesn't support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
  /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
  /// other methods to check whether the cancellation succeeded or whether the
  /// operation completed despite cancellation. On successful cancellation,
  /// the operation is not deleted; instead, it becomes an operation with
  /// an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
  /// corresponding to `Code.CANCELLED`.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelOperation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelOperation(
    _ request: Google_Longrunning_CancelOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Longrunning_CancelOperationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/google.longrunning.Operations/CancelOperation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Waits for the specified long-running operation until it is done or reaches
  /// at most a specified timeout, returning the latest state.  If the operation
  /// is already done, the latest state is immediately returned.  If the timeout
  /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
  /// timeout is used.  If the server does not support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.
  /// Note that this method is on a best-effort basis.  It may return the latest
  /// state before the specified timeout (including immediately), meaning even an
  /// immediate response is no guarantee that the operation is done.
  ///
  /// - Parameters:
  ///   - request: Request to send to WaitOperation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func waitOperation(
    _ request: Google_Longrunning_WaitOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Longrunning_WaitOperationRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: "/google.longrunning.Operations/WaitOperation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Longrunning_OperationsProvider: CallHandlerProvider {
  /// Lists operations that match the specified filter in the request. If the
  /// server doesn't support this method, it returns `UNIMPLEMENTED`.
  ///
  /// NOTE: the `name` binding allows API services to override the binding
  /// to use different resource name schemes, such as `users/*/operations`. To
  /// override the binding, API services can add a binding such as
  /// `"/v1/{name=users/*}/operations"` to their service configuration.
  /// For backwards compatibility, the default name includes the operations
  /// collection id, however overriding users must ensure the name binding
  /// is the parent resource, without the operations collection id.
  func listOperations(request: Google_Longrunning_ListOperationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_ListOperationsResponse>
  /// Gets the latest state of a long-running operation.  Clients can use this
  /// method to poll the operation result at intervals as recommended by the API
  /// service.
  func getOperation(request: Google_Longrunning_GetOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  /// Deletes a long-running operation. This method indicates that the client is
  /// no longer interested in the operation result. It does not cancel the
  /// operation. If the server doesn't support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.
  func deleteOperation(request: Google_Longrunning_DeleteOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Starts asynchronous cancellation on a long-running operation.  The server
  /// makes a best effort to cancel the operation, but success is not
  /// guaranteed.  If the server doesn't support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
  /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
  /// other methods to check whether the cancellation succeeded or whether the
  /// operation completed despite cancellation. On successful cancellation,
  /// the operation is not deleted; instead, it becomes an operation with
  /// an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
  /// corresponding to `Code.CANCELLED`.
  func cancelOperation(request: Google_Longrunning_CancelOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Waits for the specified long-running operation until it is done or reaches
  /// at most a specified timeout, returning the latest state.  If the operation
  /// is already done, the latest state is immediately returned.  If the timeout
  /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
  /// timeout is used.  If the server does not support this method, it returns
  /// `google.rpc.Code.UNIMPLEMENTED`.
  /// Note that this method is on a best-effort basis.  It may return the latest
  /// state before the specified timeout (including immediately), meaning even an
  /// immediate response is no guarantee that the operation is done.
  func waitOperation(request: Google_Longrunning_WaitOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
}

extension Google_Longrunning_OperationsProvider {
  public var serviceName: String { return "google.longrunning.Operations" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListOperations":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listOperations(request: request, context: context)
        }
      }

    case "GetOperation":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getOperation(request: request, context: context)
        }
      }

    case "DeleteOperation":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteOperation(request: request, context: context)
        }
      }

    case "CancelOperation":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.cancelOperation(request: request, context: context)
        }
      }

    case "WaitOperation":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.waitOperation(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload`
extension Google_Longrunning_Operation: GRPCProtobufPayload {}
extension Google_Longrunning_GetOperationRequest: GRPCProtobufPayload {}
extension Google_Longrunning_ListOperationsRequest: GRPCProtobufPayload {}
extension Google_Longrunning_ListOperationsResponse: GRPCProtobufPayload {}
extension Google_Longrunning_CancelOperationRequest: GRPCProtobufPayload {}
extension Google_Longrunning_DeleteOperationRequest: GRPCProtobufPayload {}
extension Google_Longrunning_WaitOperationRequest: GRPCProtobufPayload {}
extension Google_Longrunning_OperationInfo: GRPCProtobufPayload {}
