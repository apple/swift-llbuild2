//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/bytestream/bytestream.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Google_Bytestream_ByteStreamClient, then call methods of this protocol to make API calls.
public protocol Google_Bytestream_ByteStreamClientProtocol {
  func read(_ request: Google_Bytestream_ReadRequest, callOptions: CallOptions?, handler: @escaping (Google_Bytestream_ReadResponse) -> Void) -> ServerStreamingCall<Google_Bytestream_ReadRequest, Google_Bytestream_ReadResponse>
  func write(callOptions: CallOptions?) -> ClientStreamingCall<Google_Bytestream_WriteRequest, Google_Bytestream_WriteResponse>
  func queryWriteStatus(_ request: Google_Bytestream_QueryWriteStatusRequest, callOptions: CallOptions?) -> UnaryCall<Google_Bytestream_QueryWriteStatusRequest, Google_Bytestream_QueryWriteStatusResponse>
}

public final class Google_Bytestream_ByteStreamClient: GRPCClient, Google_Bytestream_ByteStreamClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.bytestream.ByteStream service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// `Read()` is used to retrieve the contents of a resource as a sequence
  /// of bytes. The bytes are returned in a sequence of responses, and the
  /// responses are delivered as the results of a server-side streaming RPC.
  ///
  /// - Parameters:
  ///   - request: Request to send to Read.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func read(
    _ request: Google_Bytestream_ReadRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Bytestream_ReadResponse) -> Void
  ) -> ServerStreamingCall<Google_Bytestream_ReadRequest, Google_Bytestream_ReadResponse> {
    return self.makeServerStreamingCall(
      path: "/google.bytestream.ByteStream/Read",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// `Write()` is used to send the contents of a resource as a sequence of
  /// bytes. The bytes are sent in a sequence of request protos of a client-side
  /// streaming RPC.
  ///
  /// A `Write()` action is resumable. If there is an error or the connection is
  /// broken during the `Write()`, the client should check the status of the
  /// `Write()` by calling `QueryWriteStatus()` and continue writing from the
  /// returned `committed_size`. This may be less than the amount of data the
  /// client previously sent.
  ///
  /// Calling `Write()` on a resource name that was previously written and
  /// finalized could cause an error, depending on whether the underlying service
  /// allows over-writing of previously written resources.
  ///
  /// When the client closes the request channel, the service will respond with
  /// a `WriteResponse`. The service will not view the resource as `complete`
  /// until the client has sent a `WriteRequest` with `finish_write` set to
  /// `true`. Sending any requests on a stream after sending a request with
  /// `finish_write` set to `true` will cause an error. The client **should**
  /// check the `WriteResponse` it receives to determine how much data the
  /// service was able to commit and whether the service views the resource as
  /// `complete` or not.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func write(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Google_Bytestream_WriteRequest, Google_Bytestream_WriteResponse> {
    return self.makeClientStreamingCall(
      path: "/google.bytestream.ByteStream/Write",
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// `QueryWriteStatus()` is used to find the `committed_size` for a resource
  /// that is being written, which can then be used as the `write_offset` for
  /// the next `Write()` call.
  ///
  /// If the resource does not exist (i.e., the resource has been deleted, or the
  /// first `Write()` has not yet reached the service), this method returns the
  /// error `NOT_FOUND`.
  ///
  /// The client **may** call `QueryWriteStatus()` at any time to determine how
  /// much data has been processed for this resource. This is useful if the
  /// client is buffering data and needs to know which data can be safely
  /// evicted. For any sequence of `QueryWriteStatus()` calls for a given
  /// resource name, the sequence of returned `committed_size` values will be
  /// non-decreasing.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryWriteStatus.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func queryWriteStatus(
    _ request: Google_Bytestream_QueryWriteStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Bytestream_QueryWriteStatusRequest, Google_Bytestream_QueryWriteStatusResponse> {
    return self.makeUnaryCall(
      path: "/google.bytestream.ByteStream/QueryWriteStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Bytestream_ByteStreamProvider: CallHandlerProvider {
  /// `Read()` is used to retrieve the contents of a resource as a sequence
  /// of bytes. The bytes are returned in a sequence of responses, and the
  /// responses are delivered as the results of a server-side streaming RPC.
  func read(request: Google_Bytestream_ReadRequest, context: StreamingResponseCallContext<Google_Bytestream_ReadResponse>) -> EventLoopFuture<GRPCStatus>
  /// `Write()` is used to send the contents of a resource as a sequence of
  /// bytes. The bytes are sent in a sequence of request protos of a client-side
  /// streaming RPC.
  ///
  /// A `Write()` action is resumable. If there is an error or the connection is
  /// broken during the `Write()`, the client should check the status of the
  /// `Write()` by calling `QueryWriteStatus()` and continue writing from the
  /// returned `committed_size`. This may be less than the amount of data the
  /// client previously sent.
  ///
  /// Calling `Write()` on a resource name that was previously written and
  /// finalized could cause an error, depending on whether the underlying service
  /// allows over-writing of previously written resources.
  ///
  /// When the client closes the request channel, the service will respond with
  /// a `WriteResponse`. The service will not view the resource as `complete`
  /// until the client has sent a `WriteRequest` with `finish_write` set to
  /// `true`. Sending any requests on a stream after sending a request with
  /// `finish_write` set to `true` will cause an error. The client **should**
  /// check the `WriteResponse` it receives to determine how much data the
  /// service was able to commit and whether the service views the resource as
  /// `complete` or not.
  func write(context: UnaryResponseCallContext<Google_Bytestream_WriteResponse>) -> EventLoopFuture<(StreamEvent<Google_Bytestream_WriteRequest>) -> Void>
  /// `QueryWriteStatus()` is used to find the `committed_size` for a resource
  /// that is being written, which can then be used as the `write_offset` for
  /// the next `Write()` call.
  ///
  /// If the resource does not exist (i.e., the resource has been deleted, or the
  /// first `Write()` has not yet reached the service), this method returns the
  /// error `NOT_FOUND`.
  ///
  /// The client **may** call `QueryWriteStatus()` at any time to determine how
  /// much data has been processed for this resource. This is useful if the
  /// client is buffering data and needs to know which data can be safely
  /// evicted. For any sequence of `QueryWriteStatus()` calls for a given
  /// resource name, the sequence of returned `committed_size` values will be
  /// non-decreasing.
  func queryWriteStatus(request: Google_Bytestream_QueryWriteStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Bytestream_QueryWriteStatusResponse>
}

extension Google_Bytestream_ByteStreamProvider {
  public var serviceName: String { return "google.bytestream.ByteStream" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Read":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.read(request: request, context: context)
        }
      }

    case "Write":
      return ClientStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.write(context: context)
      }

    case "QueryWriteStatus":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.queryWriteStatus(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload`
extension Google_Bytestream_ReadRequest: GRPCProtobufPayload {}
extension Google_Bytestream_ReadResponse: GRPCProtobufPayload {}
extension Google_Bytestream_WriteRequest: GRPCProtobufPayload {}
extension Google_Bytestream_WriteResponse: GRPCProtobufPayload {}
extension Google_Bytestream_QueryWriteStatusRequest: GRPCProtobufPayload {}
extension Google_Bytestream_QueryWriteStatusResponse: GRPCProtobufPayload {}
