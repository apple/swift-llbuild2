// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: build/bazel/remote/logstream/v1/remote_logstream.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020 The Bazel Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Log Stream API

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Contains all information necessary to create a new LogStream resource.
public struct Build_Bazel_Remote_Logstream_V1_CreateLogStreamRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The parent resource of the created LogStream.
  /// The list of valid types of parent resources of LogStreams is up to the
  /// implementing server.
  /// Example: projects/123
  public var parent: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A handle to a log (an ordered sequence of bytes).
public struct Build_Bazel_Remote_Logstream_V1_LogStream {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Structured name of the resource in the format:
  ///   {parent=**}/logstreams/{logstream_id}
  ///   Example: projects/123/logstreams/456-def
  /// Attempting to call the Byte Stream API's `Write` RPC with a LogStream's
  ///   `name` as the value for `ByteStream.Write.resource_name` is an error.
  public var name: String = String()

  /// Resource name to pass to `ByteStream.Write` in the format:
  ///   {parent=**}/logstreams/{logstream_id}/{write_token}
  ///   Example: projects/123/logstreams/456-def/789-ghi
  /// Attempting to call the Byte Stream API's `Read` RPC with a LogStream's
  ///   `write_resource_name` as the value for `ByteStream.Write.resource_name`
  ///   is an error.
  ///
  /// `write_resource_name` is separate from `name` to ensure that only the
  /// intended writers can write to a given LogStream. Writers must address write
  /// operations to the `write_resource_name`, not the `name`, and must have
  /// permission to write LogStreams. `write_resource_name` embeds a secret token
  /// and should be protected accordingly; a mishandled `write_resource_name` can
  /// result in unintended writers corrupting the LogStream. Therefore, the field
  /// should be excluded from calls to any calls which retrieve LogStream
  /// metadata (i.e.: `GetLogStream`).
  ///
  /// Bytes written to this resource must to be readable when `ByteStream.Read`
  /// is called with the `name` resource.
  /// Reading a write_resource_name must return an INVALID_ARGUMENT error.
  public var writeResourceName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Build_Bazel_Remote_Logstream_V1_CreateLogStreamRequest: @unchecked Sendable {}
extension Build_Bazel_Remote_Logstream_V1_LogStream: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "build.bazel.remote.logstream.v1"

extension Build_Bazel_Remote_Logstream_V1_CreateLogStreamRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateLogStreamRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Build_Bazel_Remote_Logstream_V1_CreateLogStreamRequest, rhs: Build_Bazel_Remote_Logstream_V1_CreateLogStreamRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Build_Bazel_Remote_Logstream_V1_LogStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogStream"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "write_resource_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.writeResourceName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.writeResourceName.isEmpty {
      try visitor.visitSingularStringField(value: self.writeResourceName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Build_Bazel_Remote_Logstream_V1_LogStream, rhs: Build_Bazel_Remote_Logstream_V1_LogStream) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.writeResourceName != rhs.writeResourceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
