// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: BuildSystem/Evaluation/rule_evaluation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

import Foundation
import SwiftProtobuf

import LLBCAS

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

//// A RuleEvaluationKey represents the evaluation of the rule for a particular configured target. The evaluation of a
//// rule results in a list of providers which represent the interface that a configured target offers to dependencies.
//// This is different from EvaluatedTargetKey in that it is a scoped down version of evaluation, since it does not
//// require the presence of the rootID field, which effectively changes with any change in the workspace. The digest of
//// a RuleEvaluationKey should be stable to the _contents_ of a configured target. This means that if a source file
//// changed, it should not invalidate the cache of a RuleEvaluationKey.
public struct RuleEvaluationKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The label for the configured target being evaluated.
  public var label: Label {
    get {return _label ?? Label()}
    set {_label = newValue}
  }
  /// Returns true if `label` has been explicitly set.
  public var hasLabel: Bool {return self._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
  public mutating func clearLabel() {self._label = nil}

  //// A dataID representing the contents of a ConfigurationTarget. ConfiguredTargets may be quite large depending on
  //// the number of dependencies and how providers are used. Instead of using the ConfiguredTargetValue in the key,
  //// we store the contents in the CAS and retrieve it using this ID.
  public var configuredTargetID: LLBCAS.LLBPBDataID {
    get {return _configuredTargetID ?? LLBCAS.LLBPBDataID()}
    set {_configuredTargetID = newValue}
  }
  /// Returns true if `configuredTargetID` has been explicitly set.
  public var hasConfiguredTargetID: Bool {return self._configuredTargetID != nil}
  /// Clears the value of `configuredTargetID`. Subsequent reads from it will return its default value.
  public mutating func clearConfiguredTargetID() {self._configuredTargetID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _label: Label? = nil
  fileprivate var _configuredTargetID: LLBCAS.LLBPBDataID? = nil
}

//// The result of evaluating a configured target under a rule. 
public struct RuleEvaluationValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The providers returned by the evaluation of the rule
  public var providerMap: LLBProviderMap {
    get {return _providerMap ?? LLBProviderMap()}
    set {_providerMap = newValue}
  }
  /// Returns true if `providerMap` has been explicitly set.
  public var hasProviderMap: Bool {return self._providerMap != nil}
  /// Clears the value of `providerMap`. Subsequent reads from it will return its default value.
  public mutating func clearProviderMap() {self._providerMap = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _providerMap: LLBProviderMap? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RuleEvaluationKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "RuleEvaluationKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "configuredTargetID"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._label)
      case 2: try decoder.decodeSingularMessageField(value: &self._configuredTargetID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._label {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._configuredTargetID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: RuleEvaluationKey, rhs: RuleEvaluationKey) -> Bool {
    if lhs._label != rhs._label {return false}
    if lhs._configuredTargetID != rhs._configuredTargetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RuleEvaluationValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "RuleEvaluationValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "providerMap"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._providerMap)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._providerMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: RuleEvaluationValue, rhs: RuleEvaluationValue) -> Bool {
    if lhs._providerMap != rhs._providerMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
