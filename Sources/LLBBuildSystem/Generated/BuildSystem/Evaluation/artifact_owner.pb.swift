// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: BuildSystem/Evaluation/artifact_owner.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

import Foundation
import SwiftProtobuf

import TSFCAS

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An ArtifactOwner contains the reference to the action that generates an artifact, effectively providing the link
/// between artifacts and actions that make up the action graph.
public struct LLBArtifactOwner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The dataID that contains the list of actions where the artifact owner action resides. This corresponds to a
  /// dataID that can be used in a RuleEvaluationKeyID to obtain the list of actions.
  public var actionsOwner: TSFCAS.LLBDataID {
    get {return _actionsOwner ?? TSFCAS.LLBDataID()}
    set {_actionsOwner = newValue}
  }
  /// Returns true if `actionsOwner` has been explicitly set.
  public var hasActionsOwner: Bool {return self._actionsOwner != nil}
  /// Clears the value of `actionsOwner`. Subsequent reads from it will return its default value.
  public mutating func clearActionsOwner() {self._actionsOwner = nil}

  /// The index of the action in the action list.
  public var actionIndex: Int32 = 0

  public var outputType: LLBArtifactOwner.OneOf_OutputType? = nil

  /// The index of the artifact in the list of outputs.
  public var outputIndex: Int32 {
    get {
      if case .outputIndex(let v)? = outputType {return v}
      return 0
    }
    set {outputType = .outputIndex(newValue)}
  }

  /// The index of the artifact in the list of unconditional outputs.
  public var unconditionalOutputIndex: Int32 {
    get {
      if case .unconditionalOutputIndex(let v)? = outputType {return v}
      return 0
    }
    set {outputType = .unconditionalOutputIndex(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_OutputType: Equatable {
    /// The index of the artifact in the list of outputs.
    case outputIndex(Int32)
    /// The index of the artifact in the list of unconditional outputs.
    case unconditionalOutputIndex(Int32)

  #if !swift(>=4.1)
    public static func ==(lhs: LLBArtifactOwner.OneOf_OutputType, rhs: LLBArtifactOwner.OneOf_OutputType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.outputIndex, .outputIndex): return {
        guard case .outputIndex(let l) = lhs, case .outputIndex(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unconditionalOutputIndex, .unconditionalOutputIndex): return {
        guard case .unconditionalOutputIndex(let l) = lhs, case .unconditionalOutputIndex(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _actionsOwner: TSFCAS.LLBDataID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension LLBArtifactOwner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBArtifactOwner"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actionsOwner"),
    2: .same(proto: "actionIndex"),
    3: .same(proto: "outputIndex"),
    4: .same(proto: "unconditionalOutputIndex"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._actionsOwner) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.actionIndex) }()
      case 3: try {
        if self.outputType != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.outputType = .outputIndex(v)}
      }()
      case 4: try {
        if self.outputType != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.outputType = .unconditionalOutputIndex(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._actionsOwner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.actionIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.actionIndex, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.outputType {
    case .outputIndex?: try {
      guard case .outputIndex(let v)? = self.outputType else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }()
    case .unconditionalOutputIndex?: try {
      guard case .unconditionalOutputIndex(let v)? = self.outputType else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBArtifactOwner, rhs: LLBArtifactOwner) -> Bool {
    if lhs._actionsOwner != rhs._actionsOwner {return false}
    if lhs.actionIndex != rhs.actionIndex {return false}
    if lhs.outputType != rhs.outputType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
