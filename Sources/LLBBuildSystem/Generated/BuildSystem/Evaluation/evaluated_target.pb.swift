// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: BuildSystem/Evaluation/evaluated_target.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

//// An EvaluatedTargetKey is used to request the evaluation of a ConfiguredTarget, as identified by the
//// ConfiguredTargetKey field.
public struct EvaluatedTargetKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The ConfiguredTargetKey that identifies the target to be evaluated.
  public var configuredTargetKey: ConfiguredTargetKey {
    get {return _configuredTargetKey ?? ConfiguredTargetKey()}
    set {_configuredTargetKey = newValue}
  }
  /// Returns true if `configuredTargetKey` has been explicitly set.
  public var hasConfiguredTargetKey: Bool {return self._configuredTargetKey != nil}
  /// Clears the value of `configuredTargetKey`. Subsequent reads from it will return its default value.
  public mutating func clearConfiguredTargetKey() {self._configuredTargetKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _configuredTargetKey: ConfiguredTargetKey? = nil
}

//// An EvaluatedTargetValue contains the result of evaluating a target, which can be used to interface between targets
//// in order to coordinate the construction of the action graph in dependency order. The evaluation of a target follows
//// the dependency graph as specified by the build system project description, meaning that if a ConfiguredTarget
//// declares a dependency on another target, it will have a reference to those dependencies EvaluatedTargetValues in
//// order to use those results in the construction of its action graph.
public struct EvaluatedTargetValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// A container for providers which are the result of the evaluation of a target.
  public var providerMap: LLBProviderMap {
    get {return _providerMap ?? LLBProviderMap()}
    set {_providerMap = newValue}
  }
  /// Returns true if `providerMap` has been explicitly set.
  public var hasProviderMap: Bool {return self._providerMap != nil}
  /// Clears the value of `providerMap`. Subsequent reads from it will return its default value.
  public mutating func clearProviderMap() {self._providerMap = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _providerMap: LLBProviderMap? = nil
}

//// A provider map contains a list of providers. There can only be 1 of each type of provider, as identified by the type
//// of the LLBAnyCodable.
public struct LLBProviderMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The list of providers returned from the evaluation of a target.
  public var providers: [LLBAnyCodable] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension EvaluatedTargetKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "EvaluatedTargetKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "configuredTargetKey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._configuredTargetKey)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._configuredTargetKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: EvaluatedTargetKey, rhs: EvaluatedTargetKey) -> Bool {
    if lhs._configuredTargetKey != rhs._configuredTargetKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EvaluatedTargetValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "EvaluatedTargetValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "providerMap"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._providerMap)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._providerMap {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: EvaluatedTargetValue, rhs: EvaluatedTargetValue) -> Bool {
    if lhs._providerMap != rhs._providerMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBProviderMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBProviderMap"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "providers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.providers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.providers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.providers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBProviderMap, rhs: LLBProviderMap) -> Bool {
    if lhs.providers != rhs.providers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
