// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: BuildSystem/Execution/action_execution.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

import Foundation
import SwiftProtobuf

import LLBBuildSystemProtocol
import LLBCAS

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Key that represents the execution of an action after the input artifacts have been resolved into concrete data IDs,
/// used to resolve the data IDs of the requested outputs.
public struct ActionExecutionKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Represents what type of action execution this key represents.
  public var actionExecutionType: ActionExecutionKey.OneOf_ActionExecutionType? = nil

  /// A command line based action execution key.
  public var command: CommandActionExecution {
    get {
      if case .command(let v)? = actionExecutionType {return v}
      return CommandActionExecution()
    }
    set {actionExecutionType = .command(newValue)}
  }

  /// A merge trees based action execution key.
  public var mergeTrees: MergeTreesActionExecution {
    get {
      if case .mergeTrees(let v)? = actionExecutionType {return v}
      return MergeTreesActionExecution()
    }
    set {actionExecutionType = .mergeTrees(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents what type of action execution this key represents.
  public enum OneOf_ActionExecutionType: Equatable {
    /// A command line based action execution key.
    case command(CommandActionExecution)
    /// A merge trees based action execution key.
    case mergeTrees(MergeTreesActionExecution)

  #if !swift(>=4.1)
    public static func ==(lhs: ActionExecutionKey.OneOf_ActionExecutionType, rhs: ActionExecutionKey.OneOf_ActionExecutionType) -> Bool {
      switch (lhs, rhs) {
      case (.command(let l), .command(let r)): return l == r
      case (.mergeTrees(let l), .mergeTrees(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// The value for an ActionExecutionKey.
public struct ActionExecutionValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of outputs IDs that the action produced. This will be in the same order as requested in
  /// actionExecutionType.
  public var outputs: [LLBCAS.LLBDataID] = []

  /// The data ID for the stdout of the action.
  public var stdoutID: LLBCAS.LLBDataID {
    get {return _stdoutID ?? LLBCAS.LLBDataID()}
    set {_stdoutID = newValue}
  }
  /// Returns true if `stdoutID` has been explicitly set.
  public var hasStdoutID: Bool {return self._stdoutID != nil}
  /// Clears the value of `stdoutID`. Subsequent reads from it will return its default value.
  public mutating func clearStdoutID() {self._stdoutID = nil}

  /// The data ID for the stderr of the action.
  public var stderrID: LLBCAS.LLBDataID {
    get {return _stderrID ?? LLBCAS.LLBDataID()}
    set {_stderrID = newValue}
  }
  /// Returns true if `stderrID` has been explicitly set.
  public var hasStderrID: Bool {return self._stderrID != nil}
  /// Clears the value of `stderrID`. Subsequent reads from it will return its default value.
  public mutating func clearStderrID() {self._stderrID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stdoutID: LLBCAS.LLBDataID? = nil
  fileprivate var _stderrID: LLBCAS.LLBDataID? = nil
}

/// An action execution description for a command line invocation.
public struct CommandActionExecution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The spec for the action to execute.
  public var actionSpec: LLBBuildSystemProtocol.LLBActionSpec {
    get {return _actionSpec ?? LLBBuildSystemProtocol.LLBActionSpec()}
    set {_actionSpec = newValue}
  }
  /// Returns true if `actionSpec` has been explicitly set.
  public var hasActionSpec: Bool {return self._actionSpec != nil}
  /// Clears the value of `actionSpec`. Subsequent reads from it will return its default value.
  public mutating func clearActionSpec() {self._actionSpec = nil}

  /// The list of inputs required for this action execution.
  public var inputs: [LLBBuildSystemProtocol.LLBActionInput] = []

  /// The list of outputs expected from this action execution.
  public var outputs: [LLBBuildSystemProtocol.LLBActionOutput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _actionSpec: LLBBuildSystemProtocol.LLBActionSpec? = nil
}

/// An action execution description for a merge trees action.
public struct MergeTreesActionExecution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of inputs to be merged together. In this context, the path in LLBActionInput is considered to be the
  /// root under which the artifact will be placed into.
  public var inputs: [LLBBuildSystemProtocol.LLBActionInput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ActionExecutionKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ActionExecutionKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    2: .same(proto: "mergeTrees"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: CommandActionExecution?
        if let current = self.actionExecutionType {
          try decoder.handleConflictingOneOf()
          if case .command(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.actionExecutionType = .command(v)}
      case 2:
        var v: MergeTreesActionExecution?
        if let current = self.actionExecutionType {
          try decoder.handleConflictingOneOf()
          if case .mergeTrees(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.actionExecutionType = .mergeTrees(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.actionExecutionType {
    case .command(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .mergeTrees(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ActionExecutionKey, rhs: ActionExecutionKey) -> Bool {
    if lhs.actionExecutionType != rhs.actionExecutionType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ActionExecutionValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ActionExecutionValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "outputs"),
    2: .same(proto: "stdoutID"),
    3: .same(proto: "stderrID"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.outputs)
      case 2: try decoder.decodeSingularMessageField(value: &self._stdoutID)
      case 3: try decoder.decodeSingularMessageField(value: &self._stderrID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 1)
    }
    if let v = self._stdoutID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._stderrID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ActionExecutionValue, rhs: ActionExecutionValue) -> Bool {
    if lhs.outputs != rhs.outputs {return false}
    if lhs._stdoutID != rhs._stdoutID {return false}
    if lhs._stderrID != rhs._stderrID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommandActionExecution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CommandActionExecution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actionSpec"),
    2: .same(proto: "inputs"),
    3: .same(proto: "outputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._actionSpec)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.outputs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._actionSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandActionExecution, rhs: CommandActionExecution) -> Bool {
    if lhs._actionSpec != rhs._actionSpec {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MergeTreesActionExecution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "MergeTreesActionExecution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MergeTreesActionExecution, rhs: MergeTreesActionExecution) -> Bool {
    if lhs.inputs != rhs.inputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
