// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: BuildSystem/Execution/action_execution.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

import Foundation
import SwiftProtobuf

import TSFCAS
import llbuild2

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Key that represents the execution of an action after the input artifacts have been resolved into concrete data IDs,
/// used to resolve the data IDs of the requested outputs.
public struct LLBActionExecutionKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Represents what type of action execution this key represents.
  public var actionExecutionType: LLBActionExecutionKey.OneOf_ActionExecutionType? = nil

  /// A command line based action execution key.
  public var command: LLBCommandActionExecution {
    get {
      if case .command(let v)? = actionExecutionType {return v}
      return LLBCommandActionExecution()
    }
    set {actionExecutionType = .command(newValue)}
  }

  /// A merge trees based action execution key.
  public var mergeTrees: LLBMergeTreesActionExecution {
    get {
      if case .mergeTrees(let v)? = actionExecutionType {return v}
      return LLBMergeTreesActionExecution()
    }
    set {actionExecutionType = .mergeTrees(newValue)}
  }

  /// This pairs up with the chainedInput in ActionKey. This should be used to prepopulate the logs of the action,
  /// since it contains the accumulated logs of the previous actions in the chain. This field is only present if the
  /// chainedInput field was set in the corresponding ActionKey.
  public var chainedLogsID: TSFCAS.LLBDataID {
    get {return _chainedLogsID ?? TSFCAS.LLBDataID()}
    set {_chainedLogsID = newValue}
  }
  /// Returns true if `chainedLogsID` has been explicitly set.
  public var hasChainedLogsID: Bool {return self._chainedLogsID != nil}
  /// Clears the value of `chainedLogsID`. Subsequent reads from it will return its default value.
  public mutating func clearChainedLogsID() {self._chainedLogsID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents what type of action execution this key represents.
  public enum OneOf_ActionExecutionType: Equatable {
    /// A command line based action execution key.
    case command(LLBCommandActionExecution)
    /// A merge trees based action execution key.
    case mergeTrees(LLBMergeTreesActionExecution)

  #if !swift(>=4.1)
    public static func ==(lhs: LLBActionExecutionKey.OneOf_ActionExecutionType, rhs: LLBActionExecutionKey.OneOf_ActionExecutionType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.command, .command): return {
        guard case .command(let l) = lhs, case .command(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mergeTrees, .mergeTrees): return {
        guard case .mergeTrees(let l) = lhs, case .mergeTrees(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _chainedLogsID: TSFCAS.LLBDataID? = nil
}

/// The value for an ActionExecutionKey.
public struct LLBActionExecutionValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of outputs IDs that the action produced. This will be in the same order as requested in
  /// actionExecutionType.
  public var outputs: [TSFCAS.LLBDataID] = []

  /// The list of unconditional outputs that this action produced. This will be in the same order as rquested in
  /// actionExecutionType.
  public var unconditionalOutputs: [TSFCAS.LLBDataID] = []

  /// The data ID for the stdout and stderr of the action.
  public var stdoutID: TSFCAS.LLBDataID {
    get {return _stdoutID ?? TSFCAS.LLBDataID()}
    set {_stdoutID = newValue}
  }
  /// Returns true if `stdoutID` has been explicitly set.
  public var hasStdoutID: Bool {return self._stdoutID != nil}
  /// Clears the value of `stdoutID`. Subsequent reads from it will return its default value.
  public mutating func clearStdoutID() {self._stdoutID = nil}

  /// Whether the action execution was a cached failure.
  public var cachedFailure: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _stdoutID: TSFCAS.LLBDataID? = nil
}

/// An action execution description for a command line invocation.
public struct LLBCommandActionExecution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The spec for the action to execute.
  public var actionSpec: llbuild2.LLBActionSpec {
    get {return _actionSpec ?? llbuild2.LLBActionSpec()}
    set {_actionSpec = newValue}
  }
  /// Returns true if `actionSpec` has been explicitly set.
  public var hasActionSpec: Bool {return self._actionSpec != nil}
  /// Clears the value of `actionSpec`. Subsequent reads from it will return its default value.
  public mutating func clearActionSpec() {self._actionSpec = nil}

  /// The list of inputs required for this action execution.
  public var inputs: [llbuild2.LLBActionInput] = []

  /// The list of outputs expected from this action execution.
  public var outputs: [llbuild2.LLBActionOutput] = []

  /// List of unconditional outputs, these are outputs that are returned even if the action failed (i.e. exitCode != 0)
  /// but it might still be empty if there was an executor error and the action didn't run at all. This is an advanced
  /// so use with care.
  public var unconditionalOutputs: [llbuild2.LLBActionOutput] = []

  /// Identifier for the dynamic action executor for this action. If this is empty (which should be the majority of the
  /// cases) actions will be scheduled on the executor specified for the build. If set, action execution will find the
  /// dynamic executor with this identifier from the dynamic execution delegate and invoke that instead.
  public var dynamicIdentifier: String = String()

  /// Identifier for the type of action this represents. This is only used for display and metrics purposes, it has no
  /// effect in how the action is executed (but is considered to be part of the action key so changes to it invalidate
  /// the action).
  public var mnemonic: String = String()

  /// A user presentable description for the action, can be used to display currently running actions in a UX friendly
  /// manner.
  public var description_p: String = String()

  /// Whether the action should be cached even if it resulted in an error. This can be useful in cases where large
  /// actions are skipped if it has already been tried, in a context where it is known that the action is
  /// deterministic. Most of the time this should be unset.
  public var cacheableFailure: Bool = false

  /// The label for the target that registered the action.
  public var label: LLBLabel {
    get {return _label ?? LLBLabel()}
    set {_label = newValue}
  }
  /// Returns true if `label` has been explicitly set.
  public var hasLabel: Bool {return self._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
  public mutating func clearLabel() {self._label = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _actionSpec: llbuild2.LLBActionSpec? = nil
  fileprivate var _label: LLBLabel? = nil
}

/// An action execution description for a merge trees action.
public struct LLBMergeTreesActionExecution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of inputs to be merged together. In this context, the path in LLBActionInput is considered to be the
  /// root under which the artifact will be placed into.
  public var inputs: [llbuild2.LLBActionInput] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Additional data to pass through the LLBActionExecutionRequest additionalData parameters, that are LLBBuildSystem
/// specific. These include parameters related to the LLBBuildEventActionDescription which are missing from the
/// generic execution request message.
public struct LLBActionExecutionRequestExtras {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The mnemonic of the action.
  public var mnemonic: String = String()

  /// A user provided description for the action.
  public var description_p: String = String()

  /// The owning target of the action.
  public var owner: LLBLabel {
    get {return _owner ?? LLBLabel()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _owner: LLBLabel? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension LLBActionExecutionKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBActionExecutionKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    16: .same(proto: "command"),
    17: .same(proto: "mergeTrees"),
    18: .same(proto: "chainedLogsID"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 16: try {
        var v: LLBCommandActionExecution?
        if let current = self.actionExecutionType {
          try decoder.handleConflictingOneOf()
          if case .command(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.actionExecutionType = .command(v)}
      }()
      case 17: try {
        var v: LLBMergeTreesActionExecution?
        if let current = self.actionExecutionType {
          try decoder.handleConflictingOneOf()
          if case .mergeTrees(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.actionExecutionType = .mergeTrees(v)}
      }()
      case 18: try { try decoder.decodeSingularMessageField(value: &self._chainedLogsID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.actionExecutionType {
    case .command?: try {
      guard case .command(let v)? = self.actionExecutionType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .mergeTrees?: try {
      guard case .mergeTrees(let v)? = self.actionExecutionType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case nil: break
    }
    if let v = self._chainedLogsID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBActionExecutionKey, rhs: LLBActionExecutionKey) -> Bool {
    if lhs.actionExecutionType != rhs.actionExecutionType {return false}
    if lhs._chainedLogsID != rhs._chainedLogsID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBActionExecutionValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBActionExecutionValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "outputs"),
    4: .same(proto: "unconditionalOutputs"),
    2: .same(proto: "stdoutID"),
    3: .same(proto: "cachedFailure"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._stdoutID) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.cachedFailure) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.unconditionalOutputs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 1)
    }
    if let v = self._stdoutID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.cachedFailure != false {
      try visitor.visitSingularBoolField(value: self.cachedFailure, fieldNumber: 3)
    }
    if !self.unconditionalOutputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unconditionalOutputs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBActionExecutionValue, rhs: LLBActionExecutionValue) -> Bool {
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unconditionalOutputs != rhs.unconditionalOutputs {return false}
    if lhs._stdoutID != rhs._stdoutID {return false}
    if lhs.cachedFailure != rhs.cachedFailure {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBCommandActionExecution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBCommandActionExecution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actionSpec"),
    2: .same(proto: "inputs"),
    3: .same(proto: "outputs"),
    9: .same(proto: "unconditionalOutputs"),
    4: .same(proto: "dynamicIdentifier"),
    5: .same(proto: "mnemonic"),
    6: .same(proto: "description"),
    7: .same(proto: "cacheableFailure"),
    8: .same(proto: "label"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._actionSpec) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dynamicIdentifier) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.mnemonic) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.cacheableFailure) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._label) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.unconditionalOutputs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._actionSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 3)
    }
    if !self.dynamicIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.dynamicIdentifier, fieldNumber: 4)
    }
    if !self.mnemonic.isEmpty {
      try visitor.visitSingularStringField(value: self.mnemonic, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if self.cacheableFailure != false {
      try visitor.visitSingularBoolField(value: self.cacheableFailure, fieldNumber: 7)
    }
    if let v = self._label {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.unconditionalOutputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unconditionalOutputs, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBCommandActionExecution, rhs: LLBCommandActionExecution) -> Bool {
    if lhs._actionSpec != rhs._actionSpec {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unconditionalOutputs != rhs.unconditionalOutputs {return false}
    if lhs.dynamicIdentifier != rhs.dynamicIdentifier {return false}
    if lhs.mnemonic != rhs.mnemonic {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.cacheableFailure != rhs.cacheableFailure {return false}
    if lhs._label != rhs._label {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBMergeTreesActionExecution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBMergeTreesActionExecution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBMergeTreesActionExecution, rhs: LLBMergeTreesActionExecution) -> Bool {
    if lhs.inputs != rhs.inputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LLBActionExecutionRequestExtras: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "LLBActionExecutionRequestExtras"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mnemonic"),
    2: .same(proto: "description"),
    3: .same(proto: "owner"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mnemonic) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mnemonic.isEmpty {
      try visitor.visitSingularStringField(value: self.mnemonic, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LLBActionExecutionRequestExtras, rhs: LLBActionExecutionRequestExtras) -> Bool {
    if lhs.mnemonic != rhs.mnemonic {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
