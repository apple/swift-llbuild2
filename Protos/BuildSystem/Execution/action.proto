// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

syntax = "proto3";

option java_package = "com.apple.llbuild2.buildsystem.execution";

import "BuildSystem/Evaluation/artifact.proto";
import "BuildSystem/Evaluation/label.proto";
import "EngineProtocol/action_execution.proto";
import "CASProtocol/data_id.proto";

// Key that represents the evaluation of an action's outputs. The inputs to this action have not been resolved at this
// stage, so the purpose of the ActionFunction is to resolve the inputs and request the execution of the action.
message LLBActionKey {

    // Represents what type of action this key represents.
    oneof actionType {

        // A command line based action key.
        LLBCommandAction command = 1;

        // A merge trees based action key.
        LLBMergeTreesAction mergeTrees = 2;
    }

    // A chained input is an input into the action (which may be repeated in each of the inputs for the action types)
    // as a way to propagate information downstream for an artifact that goes through stages of processing, so that the
    // logs for that artifact are considered a concatenation of the logs of the chain. This also groups the actions
    // in a way where if any of the nodes in the action chain fail, then all of the downstream actions are considered
    // as a failure, and not a dependency failure. In effect is a way to have split actions for better caching but still
    // be considered as a single entity. There might be multiple chains sharing upstream actions, but since it's a DAG
    // they won't be affected by the other chains, only by the upstream nodes in the chain.
    // This field is mostly expected to be empty unless this functionality is requires, so it should be checked before
    // being read.
    LLBArtifact chainedInput = 3;
}

// The value for an ActionKey.
message LLBActionValue {

    // The list of outputs IDs that the action produced. This will be in the same order as requested in
    // actionType.
    repeated LLBDataID outputs = 1;

    // The list of unconditional outputs IDs that the action produced. This will be in the same order as requested in
    // actionType.
    repeated LLBDataID unconditionalOutputs = 3;

    // The data ID for the stdout/stderr of the action.
    LLBDataID stdoutID = 2;
}

// An action execution description for a command line invocation.
message LLBCommandAction {

    // The spec for the action to execute.
    LLBActionSpec actionSpec = 1;

    // The list of artifact inputs required for this action evaluation.
    repeated LLBArtifact inputs = 2;

    // The list of outputs expected from this action evaluation.
    repeated LLBActionOutput outputs = 3;

    // List of unconditional outputs, these are outputs that are returned even if the action failed (i.e. exitCode != 0)
    // but it might still be empty if there was an executor error and the action didn't run at all. This is an advanced
    // so use with care.
    repeated LLBActionOutput unconditionalOutputs = 9;

    // Identifier for the dynamic action executor for this action. Should be empty for the vast majority of the cases,
    // and only be used for actions that schedule additional actions based on the outputs of previous actions.
    string dynamicIdentifier = 4;

    // Identifier for the type of action this represents. This is only used for display and metrics purposes, it has no
    // effect in how the action is executed (but is considered to be part of the action key so changes to it invalidate
    // the action).
    string mnemonic = 5;

    // A user presentable description for the action, can be used to display currently running actions in a UX friendly
    // manner.
    string description = 6;

    // Whether the action should be cached even if it resulted in an error. This can be useful in cases where large
    // actions are skipped if it has already been tried, in a context where it is known that the action is
    // deterministic. Most of the time this should be unset.
    bool cacheableFailure = 7;

    // The label for the target that registered the action.
    LLBLabel label = 8;
}

// An action that merges artifacts into a single tree artifact. There is no output specification since that lies in the
// artifact itself. The ActionValue will have a single dataID as output corresponding to the dataID of the tree
// artifact containing the inputs. If there are tree artifacts with colliding subdirectories, they will be merged. For
// colliding files, the last one "wins".
message LLBMergeTreesAction {

    // The list of inputs into the merge action. Each input contains the artifact to merge and the root it should be
    // merged under.
    repeated LLBMergeTreesActionInput inputs = 1;
}

// A single input into a merge trees action.
message LLBMergeTreesActionInput {

    // The artifact to merge into a tree. It can be any kind of artifact.
    LLBArtifact artifact = 1;

    // The path under which the artifact should be placed. For instance, if artifact points to a file, and path points
    // to `some/path`, then the merge trees action output will contain the file at that path. Note that this overrides
    // the artifact's own path. If you'd like to preserve the path of the artifact in the output directory tree, set
    // path to the artifact's path.
    string path = 2;
}
