// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

syntax = "proto3";

option java_package = "com.apple.llbuild2.buildsystem.execution";

import "BuildSystem/Evaluation/label.proto";
import "EngineProtocol/action_execution.proto";
import "CASProtocol/data_id.proto";

// Key that represents the execution of an action after the input artifacts have been resolved into concrete data IDs,
// used to resolve the data IDs of the requested outputs.
message LLBActionExecutionKey {

    // Represents what type of action execution this key represents.
    oneof actionExecutionType {

        // A command line based action execution key.
        LLBCommandActionExecution command = 16;

        // A merge trees based action execution key.
        LLBMergeTreesActionExecution mergeTrees = 17;
    }

    // This pairs up with the chainedInput in ActionKey. This should be used to prepopulate the logs of the action,
    // since it contains the accumulated logs of the previous actions in the chain. This field is only present if the
    // chainedInput field was set in the corresponding ActionKey.
    LLBDataID chainedLogsID = 18;
}

// The value for an ActionExecutionKey.
message LLBActionExecutionValue {

    // The list of outputs IDs that the action produced. This will be in the same order as requested in
    // actionExecutionType.
    repeated LLBDataID outputs = 1;

    // The list of unconditional outputs that this action produced. This will be in the same order as rquested in
    // actionExecutionType.
    repeated LLBDataID unconditionalOutputs = 4;

    // The data ID for the stdout and stderr of the action.
    LLBDataID stdoutID = 2;

    // Whether the action execution was a cached failure.
    bool cachedFailure = 3;
}

// An action execution description for a command line invocation.
message LLBCommandActionExecution {

    // The spec for the action to execute.
    LLBActionSpec actionSpec = 1;

    // The list of inputs required for this action execution.
    repeated LLBActionInput inputs = 2;

    // The list of outputs expected from this action execution.
    repeated LLBActionOutput outputs = 3;

    // List of unconditional outputs, these are outputs that are returned even if the action failed (i.e. exitCode != 0)
    // but it might still be empty if there was an executor error and the action didn't run at all. This is an advanced
    // so use with care.
    repeated LLBActionOutput unconditionalOutputs = 9;

    // Identifier for the dynamic action executor for this action. If this is empty (which should be the majority of the
    // cases) actions will be scheduled on the executor specified for the build. If set, action execution will find the
    // dynamic executor with this identifier from the dynamic execution delegate and invoke that instead.
    string dynamicIdentifier = 4;

    // Identifier for the type of action this represents. This is only used for display and metrics purposes, it has no
    // effect in how the action is executed (but is considered to be part of the action key so changes to it invalidate
    // the action).
    string mnemonic = 5;

    // A user presentable description for the action, can be used to display currently running actions in a UX friendly
    // manner.
    string description = 6;

    // Whether the action should be cached even if it resulted in an error. This can be useful in cases where large
    // actions are skipped if it has already been tried, in a context where it is known that the action is
    // deterministic. Most of the time this should be unset.
    bool cacheableFailure = 7;

    // The label for the target that registered the action.
    LLBLabel label = 8;
}

// An action execution description for a merge trees action.
message LLBMergeTreesActionExecution {

    // The list of inputs to be merged together. In this context, the path in LLBActionInput is considered to be the
    // root under which the artifact will be placed into.
    repeated LLBActionInput inputs = 1;
}

// Additional data to pass through the LLBActionExecutionRequest additionalData parameters, that are LLBBuildSystem
// specific. These include parameters related to the LLBBuildEventActionDescription which are missing from the
// generic execution request message.
message LLBActionExecutionRequestExtras {
    // The mnemonic of the action.
    string mnemonic = 1;

    // A user provided description for the action.
    string description = 2;

    // The owning target of the action.
    LLBLabel owner = 3;
}
