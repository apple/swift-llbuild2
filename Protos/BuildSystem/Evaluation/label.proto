// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

syntax = "proto3";

option java_package = "com.apple.llbuild2.buildsystem.evaluation";

/// A Label represents a handle for finding a target within a workspace. It is made up of 2 components: the logical path
/// to the target's container (i.e. a package or project, depends on the context) and the name of the target within that
/// container. Build systems can choose to interpret the components of a label as needed, but they must all resolve into
/// a unique target. Labels have a String representation in the form of `//logical/container/path:target_name`, but it
/// is up to each build system how they choose how to construct Labels and whether they should be presented to the end
/// users. Labels are used in llbuild2 as a differentiator between targets, to aide in the deduplication of processing
/// targets and as a cross-build system coordination system, for example, if llbuild2 build systems chose to integrate
/// other build systems into the mix.
message LLBLabel {

    /// The logical path components that represent a target grouping. It is the path-like components between `//` and
    /// `:` in the canonical form. Components cannot have spaces or `/` characters in them. Check Label.swift for more
    /// details on allowed characters.
    repeated string logicalPathComponents = 1;

    /// The name of the target within the target container. The same character restrictions as logicalPathComponents
    /// apply here.
    string targetName = 2;
}
