// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

syntax = "proto3";

option java_package = "com.apple.llbuild2.buildsystem.evaluation";

import "EngineProtocol/any_serializable.proto";
import "BuildSystem/Evaluation/configuration.proto";
import "BuildSystem/Evaluation/label.proto";
import "BuildSystem/Evaluation/provider_map.proto";
import "CASProtocol/data_id.proto";

// Key to be used when requesting the value of a configured target. A configured target represents a logical target
// after parsing and being configured by the active configuration. Configured targets have already resolved their
// dependencies (usually declared through labels). It is up to each build system implementation to define what a
// configured target looks like, and llbuild2 only enforces that it supports being serialized/deserialized.
message LLBConfiguredTargetKey {

    // The data ID for the workspace root on where to find the target definition.
    LLBDataID rootID = 1;

    // The label for the target that is being requested. It is up to the build system implementation to interpret the
    // label in order to associate it with a target.
    LLBLabel label = 2;

    // The configuration key under which this target should be evaluated. Each configured target will be requested
    // exactly once for each combination of rootID, label and configuration key.
    LLBConfigurationKey configurationKey = 3;
}

// A ConfiguredTargetValue wraps the contents of the user specified configured target. llbuild2 handles the runtime
// components of serialization and deserialization in order to provide a simpler interface for llbuild2 clients to
// integrate. A ConfiguredTarget value represents the state of a target after the target has been parsed from its
// project description file and after the configuration has been applied, but before the target has been evaluated.
message LLBConfiguredTargetValue {

    // The polymorphic codable wrapper containing the configured target as declared by llbuild2's clients.
    LLBAnySerializable serializedConfiguredTarget = 1;
    
    // The named configured target dependency map. Each entry is either a single provider map or a list of provider
    // maps, with a name as defined by the build system implementation. Rule implementations can then read the
    // dependencies providers using these names. LLBConfiguredTargets must implement an API that returns this map
    // of dependencies.
    repeated LLBNamedConfiguredTargetDependency targetDependencies = 2;
}

// A single named entry for dependencies. For example, a Swift target could have multiple library dependencies under
// the "dependencies" named dependency, and a single tool dependency under the "tool" dependency. Rule implementations
// can then read the providers from these dependencies using these names as key.
message LLBNamedConfiguredTargetDependency {
    // The type of dependency, whether it is a single dependency or a list of dependencies.
    enum Type {
        SINGLE = 0;
        LIST = 1;
    }

    // The name for this dependency.
    string name = 1;
    
    // The type of dependency.
    Type type = 2;

    // The list of providerMaps that correspond to this dependency. For single dependencies, this list must have a
    // single element. For the list type, it can have any number of elements.
    repeated LLBProviderMap providerMaps = 3;
}
