// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

syntax = "proto3";

option java_package = "com.apple.llbuild2.buildsystem.evaluation";

import "BuildSystem/Evaluation/configuration.proto";
import "BuildSystem/Evaluation/label.proto";
import "BuildSystem/Evaluation/configured_target.proto";
import "BuildSystem/Evaluation/provider_map.proto";
import "CASProtocol/data_id.proto";

// The reference to a rule evaluation key. This is used for 2 purposes: to avoid having a large rule evaluation key
// since the configured target might be large in size (potentially avoidable with proper CAS architecture) and to use
// as a reference for artifact ownership. Artifacts then get a reference to the rule evaluation that registered them in
// order to find the action that generates it. Initially this was solved by uploading the action itself into the CAS and
// having the artifact ownership point to that, but there was a cycle issue when uploading the action keys as some input
// artifacts had not been updated yet. With this approach, artifacts get the ownership during action registration,
// avoiding that particular issue.
message LLBRuleEvaluationKeyID {

    // The data ID for the rule evaluation key.
    LLBDataID ruleEvaluationKeyID = 1;
}

// A RuleEvaluationKey represents the evaluation of the rule for a particular configured target. The evaluation of a
// rule results in a list of providers which represent the interface that a configured target offers to dependencies.
// This is different from EvaluatedTargetKey in that it is a scoped down version of evaluation, since it does not
// require the presence of the rootID field, which effectively changes with any change in the workspace. The digest of
// a RuleEvaluationKey should be stable to the _contents_ of a configured target. This means that if a source file
// changed, it should not invalidate the cache of a RuleEvaluationKey.
message LLBRuleEvaluationKey {

    // The label for the configured target being evaluated.
    LLBLabel label = 1;

    // The configured target value to evaluate in the rule.
    LLBConfiguredTargetValue configuredTargetValue = 2;

    // The configuration key under which this should be evaluated under. The ConfigurationValue fragments will be made
    // available in the rule context.
    LLBConfigurationKey configurationKey = 3;
}

// The result of evaluating a configured target under a rule.
message LLBRuleEvaluationValue {

    // The list of IDs that correspond to ActionKeys in the CAS.
    repeated LLBDataID actionIDs = 1;

    // The providers returned by the evaluation of the rule
    LLBProviderMap providerMap = 2;
}
